var dbPromise;class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static openDB(){return navigator.serviceWorker?idb.open("rReviews",1,function(e){e.createObjectStore("restaurants",{keyPath:"id"}).createIndex("ID","id")}):Promise.resolve()}static getCachedData(){return dbPromise||(dbPromise=DBHelper.openDB()),dbPromise.then(function(e){if(e)return e.transaction("restaurants").objectStore("restaurants").getAll()})}static fetchRestaurants(e){DBHelper.getCachedData().then(function(t){if(t.length>0&&!navigator.onLine)return e(null,t);fetch(DBHelper.DATABASE_URL,{credentials:"same-origin"}).then(e=>e.json()).then(t=>(dbPromise.then(function(e){if(e){var n=e.transaction("restaurants","readwrite").objectStore("restaurants");t.forEach(e=>n.put(e)),n.openCursor(null,"prev").then(function(e){return e.advance(50)}).then(function e(t){if(t)return t.delete(),t.continue().then(e)})}}),e(null,t))).catch(t=>e(t,null))});let t=new XMLHttpRequest;t.open("GET",DBHelper.DATABASE_URL),t.onload=(()=>{if(200===t.status){const n=JSON.parse(t.responseText);e(null,n)}else{const n=`Request failed. Returned status of ${t.status}`;e(n,null)}}),t.send()}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.find(t=>t.id==e);n?t(null,n):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.cuisine_type==e);t(null,n)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.neighborhood==e);t(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,n){DBHelper.fetchRestaurants((r,a)=>{if(r)n(r,null);else{let r=a;"all"!=e&&(r=r.filter(t=>t.cuisine_type==e)),"all"!=t&&(r=r.filter(e=>e.neighborhood==t)),n(null,r)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].neighborhood),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].cuisine_type),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/imgRes/${e.photograph}-`}static imageAltForRestaurant(e){return`${e.alt}`}static buttonLabel(e){return e.bLabel}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}}
//# sourceMappingURL=dbhelper.js.map