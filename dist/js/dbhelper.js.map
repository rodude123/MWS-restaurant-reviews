{"version":3,"sources":["dbhelper.js"],"names":["dbPromise","DBHelper","DATABASE_URL","[object Object]","navigator","serviceWorker","idb","open","upgradeDb","createObjectStore","keyPath","createIndex","Promise","resolve","openDB","then","db","transaction","objectStore","getAll","callback","getCachedData","data","length","onLine","fetch","credentials","rest","json","store","forEach","restaurant","put","openCursor","cur","advance","delRest","delete","continue","catch","err","xhr","XMLHttpRequest","onload","status","JSON","parse","responseText","error","send","id","fetchRestaurants","restaurants","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","photograph","alt","bLabel","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP"],"mappings":"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","file":"dbhelper.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\nvar dbPromise;\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n    static get DATABASE_URL() {\r\n        const port = 1337 // Change this to your server port\r\n        return `http://localhost:${port}/restaurants`;\r\n    }\r\n\r\n    static openDB() \r\n    {\r\n        if (!navigator.serviceWorker) \r\n        {\r\n            return Promise.resolve()\r\n        }\r\n        return idb.open(\"rReviews\", 1, function(upgradeDb) \r\n        {\r\n            var store = upgradeDb.createObjectStore(\"restaurants\", {\r\n                keyPath: \"id\"\r\n            });\r\n            store.createIndex(\"ID\", \"id\")\r\n        })\r\n    }\r\n    static getCachedData() {\r\n        if (!dbPromise) \r\n        {\r\n            dbPromise = DBHelper.openDB()\r\n        }\r\n        return dbPromise.then(function(db) \r\n        {\r\n            if (!db) \r\n            {\r\n                return\r\n            }\r\n            var tx = db.transaction(\"restaurants\");\r\n            var store = tx.objectStore(\"restaurants\");\r\n            return store.getAll()\r\n        })\r\n    }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n    static fetchRestaurants(callback) \r\n    {\r\n        DBHelper.getCachedData().then(function(data) \r\n        {\r\n            if (data.length > 0 && !navigator.onLine) \r\n            {\r\n              return callback(null, data)\r\n            }\r\n            fetch(DBHelper.DATABASE_URL, {credentials:\"same-origin\"}).then(rest => rest.json()).then(data => {\r\n                dbPromise.then(function(db) \r\n                {\r\n                    if (!db) {return;}\r\n\r\n                    var tx = db.transaction('restaurants', 'readwrite');\r\n                    var store = tx.objectStore('restaurants');\r\n\r\n                    data.forEach(restaurant => store.put(restaurant));\r\n\r\n                    //limit the data for 50\r\n                    store.openCursor(null, 'prev').then(function(cur) \r\n                    {\r\n                        return cur.advance(50);\r\n                    }).then(function delRest(cur) \r\n                    {\r\n                        if (!cur) {return;}\r\n                        cur.delete();\r\n                        return cur.continue().then(delRest)\r\n                    });\r\n                });\r\n                return callback(null, data);\r\n            }).catch(err =>{return callback(err, null)});\r\n        });\r\n\r\n\r\n        let xhr = new XMLHttpRequest();\r\n        xhr.open('GET', DBHelper.DATABASE_URL);\r\n        xhr.onload = () => {\r\n          if (xhr.status === 200) { // Got a success response from server!\r\n            const json = JSON.parse(xhr.responseText);\r\n            const restaurants = json;\r\n            callback(null, restaurants);\r\n          } else { // Oops!. Got an error from server.\r\n            const error = (`Request failed. Returned status of ${xhr.status}`);\r\n            callback(error, null);\r\n          }\r\n        };\r\n        xhr.send();\r\n    }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return (`/imgRes/${restaurant.photograph}-`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image alt text.\r\n   */\r\n  static imageAltForRestaurant(restaurant) {\r\n    return (`${restaurant.alt}`);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Aria Label for the buttons\r\n   */\r\n   static buttonLabel(restaurant){\r\n    return restaurant.bLabel;\r\n   }\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  }\r\n\r\n}\r\n"]}